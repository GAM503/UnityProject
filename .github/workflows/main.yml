name: Unity Game Actions

permissions: write-all

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  test:
    name: Test The Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-test-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-test-
      - name: Run Unit Tests
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: .
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      #- name: Setup dotnet 5 for SonarQube
      #  uses: actions/setup-dotnet@v2
      #  with:
      #    dotnet-version: "5.0.x"
      #- name: Set up JDK 11 for SonarQube
      #  uses: actions/setup-java@v3
      #  with:
      #    distribution: "zulu"
      #    java-version: 11
      #- name: SonarQube Setup
      #  uses: actions/checkout@v4
      #  with:
      #    fetch-depth: 0
      #- name: SonarQube Scan
      #  uses: SonarSource/sonarqube-scan-action@v5
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      #- name: SonarQube Quality Gate Check
      #  uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
      #  with:
      #    scanMetadataReportFile: ../.sonarqube/out/.sonar/report-task.txt
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build:
    name: Build The Project
    runs-on: windows-latest
    needs: test
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          allowDirtyBuild: true

      # Output
      - uses: actions/upload-artifact@v4
        with:
          name: Build
          path: build
